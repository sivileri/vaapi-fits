###
###
### SPDX-License-Identifier: BSD-3-Clause
###

media._get_test_spec("av1", "decode", "8bit").update({
  "AV1_4096x2160" : dict(
    source = os.path.join(assets, "DXVAContent", "AV1_4096x2160.mp4"),
    width = 4096, height = 2160, format = "NV12", frames = 256,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "MSHDRef_Motion_FastCam_Action_03_1920x1080p24f_3834kbps_randomaccess_av1" : dict(
    source = os.path.join(assets, "DXVAContent", "MSHDRef_Motion_FastCam_Action_03_1920x1080p24f_3834kbps_randomaccess_av1.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 32,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "MSHDRef_Motion_FastCam_Action_03_1920x1080p24f_lowlevel_av1" : dict(
    source = os.path.join(assets, "DXVAContent", "MSHDRef_Motion_FastCam_Action_03_1920x1080p24f_lowlevel_av1.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 300,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "MSHDRef_Texture_High_01_320x240p30f_lowdelay_av1" : dict(
    source = os.path.join(assets, "DXVAContent", "MSHDRef_Texture_High_01_320x240p30f_lowdelay_av1.mp4"),
    width = 320, height = 240, format = "NV12", frames = 300,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "MSHDRef_Texture_SkinTones_05_352x288p15f_intra_av1" : dict(
    source = os.path.join(assets, "DXVAContent", "MSHDRef_Texture_SkinTones_05_352x288p15f_intra_av1.mp4"),
    width = 352, height = 288, format = "NV12", frames = 261,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "MSHDRef_Texture_SkinTones_05_352x288p15f_randomaccess_av1" : dict(
    source = os.path.join(assets, "DXVAContent", "MSHDRef_Texture_SkinTones_05_352x288p15f_randomaccess_av1.mp4"),
    width = 352, height = 288, format = "NV12", frames = 261,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "MSHDRef_Texture_SkinTones_05_352x288p25f_lowdelay_P_av1" : dict(
    source = os.path.join(assets, "DXVAContent", "MSHDRef_Texture_SkinTones_05_352x288p25f_lowdelay_P_av1.mp4"),
    width = 352, height = 288, format = "NV12", frames = 300,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "av1_v1_crew_50frames_mp4box_fixed" : dict(
    source = os.path.join(assets, "DXVAContent", "av1_v1_crew_50frames_mp4box_fixed.mp4"),
    width = 352, height = 288, format = "NV12", frames = 50,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_basketball_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_basketball_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 450,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_chinese_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_chinese_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 240,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_chrome_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_chrome_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 3600,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_circuit_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_circuit_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 336,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_craigslist_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_craigslist_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 376,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_englishdoc_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_englishdoc_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 450,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_excel_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_excel_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 3567,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_logfile_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_logfile_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 82,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_macdesktop1_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_macdesktop1_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 441,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_macdesktop2_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_macdesktop2_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 444,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_mouse_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_mouse_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 89,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_notepad_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_notepad_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 227,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_outlook_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_outlook_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 3600,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_powerpoint1_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_powerpoint1_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 3591,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_powerpoint2_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_powerpoint2_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 93,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_powerpoint3_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_powerpoint3_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 263,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_scroll1_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_scroll1_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 131,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_scroll2_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_scroll2_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 119,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_spreadsheet_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_spreadsheet_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 450,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_windesktop1_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_windesktop1_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 194,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_windesktop2_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_windesktop2_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 440,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "screen_word_1920x1080_2000kbps_gop2s" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_word_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 3600,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "stockholm-superres" : dict(
    source = os.path.join(assets, "DXVAContent", "stockholm-superres.mkv"),
    width = 1280, height = 720, format = "NV12", frames = 516,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  )
})

media._get_test_spec("av1", "decode", "10bit").update({
   "4K_10Bit" : dict(
    source = os.path.join(assets, "DXVAContent", "tearsofsteel_4k_60s_24fps.12000kbps.3840x2160.av1-10b.2ch.128kbps.aac.mp4"),
    width = 3840, height = 2160, format = "P010", frames = 723,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  ),
  "Chimera-2397fps-AV1-10bit-1920x1080-3365kbps" : dict(
    source = os.path.join(assets, "DXVAContent", "Chimera-2397fps-AV1-10bit-1920x1080-3365kbps.mp4"),
    width = 1920, height = 1080, format = "P010", frames = 3000,
    metric = dict(type = "md5"), refctx = ["key:decode.av1"],
  )
})

media._get_test_spec("av1", "encode", "8bit").update({
  "QVGA" : dict(
    source = os.path.join(assets, "yuv", "QVGA_NV12.yuv"),
    width = 320, height = 240, format = "NV12", frames = 300,
    refctx = ["driver"],
    variants = dict(
      cqp = [
        # Single tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 1, qp = 14, quality = 4, profile = "main", tile_mode = 0),
      ],
      cbr = [
        # Single tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 800, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 800, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 1, bitrate = 800, fps = 30, profile = "main", tile_mode = 0),
      ],
      vbr = [
        # Single tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 1250, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 1250, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 1, bitrate = 1250, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
      ],
    ),
  ),
  "720p" : dict(
    source = os.path.join(assets, "yuv", "720p_NV12.yuv"),
    width = 1280, height = 720, format = "NV12", frames = 150,
    refctx = ["driver"],
    variants = dict(
      cqp = [
        # Single tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 1, qp = 14, quality = 4, profile = "main", tile_mode = 0),
        # Uniform tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 1, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 1, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 1, qp = 14, quality = 4, profile = "main", tile_mode = 0),
        # Configurable tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 1),
          dict(gop = 30, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 1),
          dict(gop = 3, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 1, qp = 14, quality = 4, profile = "main", tile_mode = 1),
      ],
      cbr = [
        # Single tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 4000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 4000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 1, bitrate = 4000, fps = 30, profile = "main", tile_mode = 0),
        # Uniform tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 1, bframes = 0, bitrate = 4000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 1, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, bitrate = 4000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, bitrate = 4000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 1, bitrate = 4000, fps = 30, profile = "main", tile_mode = 0),
        # Configurable tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, bitrate = 4000, fps = 30, profile = "main", tile_mode = 1),
          dict(gop = 30, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, bitrate = 4000, fps = 30, profile = "main", tile_mode = 1),
          dict(gop = 3, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 1, bitrate = 4000, fps = 30, profile = "main", tile_mode = 1),
      ],
      vbr = [
        # Single tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 4000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 4000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 1, bitrate = 4000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
        # Uniform tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 1, bframes = 0, bitrate = 4000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 1, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, bitrate = 4000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, bitrate = 4000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 1, bitrate = 4000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
        # Configurable tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, bitrate = 4000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 1),
          dict(gop = 30, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, bitrate = 4000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 1),
          dict(gop = 3, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 1, bitrate = 4000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 1),
      ],
    ),
  ),
  "1080p" : dict(
    source = os.path.join(assets, "yuv", "1080p_NV12.yuv"),
    width = 1920, height = 1080, format = "NV12", frames = 150,
    refctx = ["driver"],
    variants = dict(
      cqp = [
        # Single tile
          # Intra, Inter P, 2 Inter B, 3 Inter B
          dict(gop = 1, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 5, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 2, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 1, qp = 14, quality = 4, profile = "main", tile_mode = 0),
        # Uniform tile
          # Intra, Inter P, 2 Inter B, 3 Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 1, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 1, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 5, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 2, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 1, qp = 14, quality = 4, profile = "main", tile_mode = 0),
        # Configurable tile
          # Intra, Inter P, 2 Inter B, 3 Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 1),
          dict(gop = 30, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 1),
          dict(gop = 5, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 2, qp = 14, quality = 4, profile = "main", tile_mode = 1),
          dict(gop = 3, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 1, qp = 14, quality = 4, profile = "main", tile_mode = 1),
      ],
      cbr = [
        # Single tile
          # Intra, Inter P, 2 Inter B, 3 Inter B
          dict(gop = 1, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 6000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 6000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 5, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 2, bitrate = 6000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 1, bitrate = 6000, fps = 30, profile = "main", tile_mode = 0),
        # Uniform tile
          # Intra, Inter P, 2 Inter B, 3 Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 1, bframes = 0, bitrate = 6000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 1, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, bitrate = 6000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, bitrate = 6000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 5, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 2, bitrate = 6000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 1, bitrate = 6000, fps = 30, profile = "main", tile_mode = 0),
        # Configurable tile
          # Intra, Inter P, 2 Inter B, 3 Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, bitrate = 6000, fps = 30, profile = "main", tile_mode = 1),
          dict(gop = 30, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, bitrate = 6000, fps = 30, profile = "main", tile_mode = 1),
          dict(gop = 5, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 2, bitrate = 6000, fps = 30, profile = "main", tile_mode = 1),
          dict(gop = 3, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 1, bitrate = 6000, fps = 30, profile = "main", tile_mode = 1),
      ],
      vbr = [
        # Single tile
          # Intra, Inter P, 2 Inter B, 3 Inter B
          dict(gop = 1, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 5, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 2, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 1, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
        # Uniform tile
          # Intra, Inter P, 2 Inter B, 3 Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 1, bframes = 0, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 1, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 5, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 2, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 1, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
        # Configurable tile
          # Intra, Inter P, 2 Inter B, 3 Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 1),
          dict(gop = 30, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 1),
          dict(gop = 5, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 2, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 1),
          dict(gop = 3, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 1, bitrate = 6000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 1),
      ],
    ),
  ),
  "2160p" : dict(
    source = os.path.join(assets, "yuv", "2160p_NV12.yuv"),
    width = 3840, height = 2160, format = "NV12", frames = 150,
    refctx = ["driver"],
    variants = dict(
      cqp = [
        # Single tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 1, qp = 14, quality = 4, profile = "main", tile_mode = 0),
        # Uniform tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 1, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 1, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 1, qp = 14, quality = 4, profile = "main", tile_mode = 0),
        # Configurable tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 1),
          dict(gop = 30, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, qp = 14, quality = 4, profile = "main", tile_mode = 1),
          dict(gop = 3, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 1, qp = 14, quality = 4, profile = "main", tile_mode = 1),
      ],
      cbr = [
        # Single tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 24000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 24000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 1, bitrate = 24000, fps = 30, profile = "main", tile_mode = 0),
        # Uniform tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 1, bframes = 0, bitrate = 24000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 1, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, bitrate = 24000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, bitrate = 24000, fps = 30, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 1, bitrate = 24000, fps = 30, profile = "main", tile_mode = 0),
        # Configurable tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, bitrate = 24000, fps = 30, profile = "main", tile_mode = 1),
          dict(gop = 30, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, bitrate = 24000, fps = 30, profile = "main", tile_mode = 1),
          dict(gop = 3, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 1, bitrate = 24000, fps = 30, profile = "main", tile_mode = 1),
      ],
      vbr = [
        # Single tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 36000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 36000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 1, bitrate = 36000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
        # Uniform tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 1, bframes = 0, bitrate = 36000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 1, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, bitrate = 36000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 30, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, bitrate = 36000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
          dict(gop = 3, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 1, bitrate = 36000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 0),
        # Configurable tile
          # Intra, Inter P, Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, bitrate = 36000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 1),
          dict(gop = 30, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, bitrate = 36000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 1),
          dict(gop = 3, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 1, bitrate = 36000, fps = 30, quality = 4, refs = 1, profile = "main", tile_mode = 1),
      ],
    ),
  ),
})

media._get_test_spec("av1", "encode", "10bit").update({
  "720p" : dict(
    source = os.path.join(assets, "yuv", "720p_1280x720_P010_10LE.yuv"),
    width = 1280, height = 720, format = "P010", frames = 300,
    refctx = ["driver"],
    variants = dict(
      cbr = [
        # Single tile
          # Intra, Inter P, 2 Inter B, 3 Inter B
          dict(gop = 1, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 6000, fps = 30, profile = "main"),
          dict(gop = 30, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 0, bitrate = 6000, fps = 30, profile = "main"),
          dict(gop = 5, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 2, bitrate = 6000, fps = 30, profile = "main"),
          dict(gop = 3, tile_rows_log2 = 0, tile_cols_log2 = 0, bframes = 1, bitrate = 6000, fps = 30, profile = "main"),
        # Uniform tile
          # Intra, Inter P, 2 Inter B, 3 Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 1, bframes = 0, bitrate = 6000, fps = 30, profile = "main"),
          dict(gop = 1, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, bitrate = 6000, fps = 30, profile = "main"),
          dict(gop = 30, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 0, bitrate = 6000, fps = 30, profile = "main"),
          dict(gop = 5, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 2, bitrate = 6000, fps = 30, profile = "main"),
          dict(gop = 3, tile_rows_log2 = 2, tile_cols_log2 = 2, bframes = 1, bitrate = 6000, fps = 30, profile = "main"),
        # Configurable tile
          # Intra, Inter P, 2 Inter B, 3 Inter B
          dict(gop = 1, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, bitrate = 6000, fps = 30, profile = "main"),
          dict(gop = 30, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 0, bitrate = 6000, fps = 30, profile = "main"),
          dict(gop = 5, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 2, bitrate = 6000, fps = 30, profile = "main"),
          dict(gop = 3, tile_rows_log2 = 1, tile_cols_log2 = 2, bframes = 1, bitrate = 6000, fps = 30, profile = "main"),
      ],
    ),
  ),
})

media._get_test_spec("av1", "transcode").update({

# Pure transcode

  "AV1_4096x2160-av1toav1-transcode" : dict(
    source = os.path.join(assets, "DXVAContent", "AV1_4096x2160.mp4"),
    width = 4096, height = 2160, format = "NV12", frames = 256, mode = "hw",
    outputs = [dict(codec = "av1", mode = "hw", gop_size = 30, num_b_frames = 0)],
  ),

  "MSHDRef_Motion_FastCam_Action_03_1920x1080p24f_lowlevel_av1-av1toav1-transcode" : dict(
    source = os.path.join(assets, "DXVAContent", "MSHDRef_Motion_FastCam_Action_03_1920x1080p24f_lowlevel_av1.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 300, mode = "hw",
    outputs = [dict(codec = "av1", mode = "hw", gop_size = 30, num_b_frames = 0)],
  ),

  "screen_notepad_1920x1080_2000kbps_gop2s-av1toav1-transcode" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_notepad_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 227, mode = "hw",
    outputs = [dict(codec = "av1", mode = "hw", gop_size = 30, num_b_frames = 0)],
  ),

  "AV1_4096x2160-av1toav1-transcode-bframes" : dict(
    source = os.path.join(assets, "DXVAContent", "AV1_4096x2160.mp4"),
    width = 4096, height = 2160, format = "NV12", frames = 256, mode = "hw",
    outputs = [dict(codec = "av1", mode = "hw", gop_size = 3, num_b_frames = 1)],
  ),

  "MSHDRef_Motion_FastCam_Action_03_1920x1080p24f_lowlevel_av1-av1toav1-transcode-bframes" : dict(
    source = os.path.join(assets, "DXVAContent", "MSHDRef_Motion_FastCam_Action_03_1920x1080p24f_lowlevel_av1.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 300, mode = "hw",
    outputs = [dict(codec = "av1", mode = "hw", gop_size = 5, num_b_frames = 2)],
  ),

  "screen_notepad_1920x1080_2000kbps_gop2s-av1toav1-transcode-bframes" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_notepad_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 227, mode = "hw",
    outputs = [dict(codec = "av1", mode = "hw", gop_size = 7, num_b_frames = 3)],
  ),

# VPP Scaling filter/Cross-codec

  "tearsofsteel-h264toav1-4k-transcode-vppscale" : dict(
    source = os.path.join(assets, "DXVAContent", "tearsofsteel_4k_60s_24fps.12000kbps.3840x2160.h264-8b.2ch.128kbps.aac.h264"),
    width = 3840, height = 2160, format = "NV12", frames = 1440, mode = "hw",
    outputs = [dict(codec = "av1", mode = "hw", gop_size = 30, num_b_frames = 0, width = 1920, height = 1080)],
  ),

# CBR rate control mode

  "MSHDRef_Motion_FastCam_Action_03_1920x1080p24f_lowlevel_av1-av1toav1-transcode-cbr" : dict(
    source = os.path.join(assets, "DXVAContent", "MSHDRef_Motion_FastCam_Action_03_1920x1080p24f_lowlevel_av1.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 300, mode = "hw",
    outputs = [dict(codec = "av1", mode = "hw", gop_size = 30, num_b_frames = 0, rcmode="CBR", avg_bitrate = 250000, rc_buffer_size = 250000, rc_init_occupancy = 250000)],
  ),

# VBR rate control mode

  "screen_notepad_1920x1080_2000kbps_gop2s-av1toav1-transcode-vbr" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_notepad_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 227, mode = "hw",
    outputs = [dict(codec = "av1", mode = "hw", gop_size = 30, num_b_frames = 0, rcmode="VBR", avg_bitrate = 100000 , max_bitrate = 200000)],
  ),

# QVBR rate control mode

  "screen_notepad_1920x1080_2000kbps_gop2s-av1toav1-transcode-min-qvbr" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_notepad_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 227, mode = "hw",
    outputs = [dict(codec = "av1", mode = "hw", gop_size = 30, num_b_frames = 0, rcmode="QVBR", avg_bitrate = 100000 , max_bitrate = 200000, qvbr_quality = 1)],
  ),

  "screen_notepad_1920x1080_2000kbps_gop2s-av1toav1-transcode-mid-qvbr" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_notepad_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 227, mode = "hw",
    outputs = [dict(codec = "av1", mode = "hw", gop_size = 30, num_b_frames = 0, rcmode="QVBR", avg_bitrate = 100000 , max_bitrate = 200000, qvbr_quality = 31)],
  ),

  "screen_notepad_1920x1080_2000kbps_gop2s-av1toav1-transcode-max-qvbr" : dict(
    source = os.path.join(assets, "DXVAContent", "screen_notepad_1920x1080_2000kbps_gop2s.mp4"),
    width = 1920, height = 1080, format = "NV12", frames = 227, mode = "hw",
    outputs = [dict(codec = "av1", mode = "hw", gop_size = 30, num_b_frames = 0, rcmode="QVBR", avg_bitrate = 100000 , max_bitrate = 200000, qvbr_quality = 63)],
  ),

})

for v in media._get_test_spec("av1", "transcode").values():
  v["refctx"] = ["driver"]
